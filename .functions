# Some functions found here depend on zsh

# General

VID_EXT='\.(mkv|mp4|ogg|avi|divx|mpg|mpeg|wmv|asf|3gp|3g2|mov|skm|m4v|f4v|flv|rm|rmvb|nut|ogv|dv|ts|mts|webm|webv|vob)$'

pexec () {
	[ $NO_P_ECHO ] || echo "$@" 1>&2
	[ $NO_P_EXEC ] || "$@"
}

xp() {
  echo "$@" | xsel -bi
}

sparse_replica() {
  err_msg="Usage: $0 dir1 dir2"
  [[ $# != 2  ]] && echo "Wrong no. of args.\n" $err_msg && return 1
  [[ ! -d $1 ]] && echo "$1 is not a dir!\n" $err_msg && return 1
  [[ ! -d $2 ]] && echo "$2 is not a dir!\n" $err_msg && return 1
  [[ "`realpath $1`" == "`realpath $2`" ]] && echo "$1 & $2 are the same path.\n" $err_msg && return 1

  find -H "$1" -type d | while read d; do
    echo mkdir -p ${d/$1/$2}
    mkdir -p ${d/$1/$2}
  done

  find -H "$1" -type f | while read f; do
    echo dd if=/dev/zero of="${f/$1/$2}" bs=1 seek="`stat -c '%s' $f`" count=0
    dd if=/dev/zero of="${f/$1/$2}" bs=1 seek="`stat -c '%s' $f`" count=0 2>/dev/null
  done
}

calc() {
  lua -e "print($@)"
}

zcalc() {
  local a="$*"
  echo $a
}

URIs() {
  tshark tcp -Y "http.request.full_uri" -T fields -e http.request.full_uri $@
}

T-sleep-if-active() {
  while [[ "$(transmission-remote -tactive -l |wc -l)" != 2 ]]; do
    echo -n '\rWaiting on active torrents to finish...'
    sleep 2
  done
  echo -n '\n'
}

T-sleep-if-downloading() {
  while [[ "$(transmission-remote -tactive -l | egrep -v '(^Sum|\sSeeding)' |wc -l)" != 1 ]]; do
    echo -n '\rWaiting on active non-seeding torrents to finish...'
    sleep 2
  done
  echo -n '\n'
}

T-add-trackers() {

  t_list=(udp://tracker.coppersurfer.tk:6969/announce
          udp://open.demonii.com:1337
          udp://tracker.pirateparty.gr:6969/announce
          udp://tracker.opentrackr.org:1337
          udp://9.rarbg.to:2710
          udp://9.rarbg.me:2710)

  for t in $t_list; do
    T -t$1 -td $t
  done

}

trw() {
  d_rate=$1
  u_rate=$2
  t="$3"
  shift;shift;shift
  transmission-remote -w "$PWD"
  if transmission-remote -a "$t" $@; then
    sleep 1
    curr_t="$(expr "`transmission-remote -tactive -l| tail -2|head -1`" : '\s*\([0-9]*\)\s.*')"
    if  [[ "${curr_t}" =~ '[0-9]+' ]]; then
      transmission-remote -t "$curr_t" -d "$d_rate" -u "$u_rate"
    else
      echo No torrent ID found "'curr_t=${curr_t}'".
    fi
  else
    echo Adding torrent "'${t}'" failed.
  fi
}

ttrw() {
  d_rate=$1
  u_rate=$2
  tHash="${(U)3}"

  if [[ ${tHash:0:20} == 'MAGNET:?XT=URN:BTIH:' ]]; then
    tHash="${tHash:20:40}"
  fi

  shift;shift;shift
  #trw $d_rate $u_rate "http://torrage.com/torrent/${tHash}.torrent" $@
  trw $d_rate $u_rate <(curl --header 'Host: itorrents.org' --user-agent 'Mozilla/5.0 (X11; Linux x86_64; rv:64.0) Gecko/20100101 Firefox/64.0' --header 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8' --header 'Accept-Language: en-US,en;q=0.5' --header 'DNT: 1' --cookie '__cfduid=d22adfc50f64e8bd8e31fc9dba57ebb811536779066; cf_clearance=e9653b53f69590b66ab7d02b3ddcda3d78558fea-1542153388-3600-150' --header 'Upgrade-Insecure-Requests: 1' "https://itorrents.org/torrent/${tHash}.torrent" 2>/dev/null) $@
}

ttrw2() {
  d_rate=$1
  u_rate=$2
  tHash="${(U)3}"

  if [[ ${tHash:0:20} == 'MAGNET:?XT=URN:BTIH:' ]]; then
    tHash="${tHash:20:40}"
  fi

  shift;shift;shift
  trw $d_rate $u_rate "http://itorrents.org/torrent/${tHash}.torrent" $@
}


ttrw3() {
  d_rate=$1
  u_rate=$2
  tHash="${(U)3}"

  if [[ ${tHash:0:20} == 'MAGNET:?XT=URN:BTIH:' ]]; then
    tHash="${tHash:20:40}"
  fi

  shift;shift;shift
  trw $d_rate $u_rate "https://btdb.eu/tfiles//${tHash}.torrent" $@
}

ttrw4() {
  # Just another provider
  d_rate=$1
  u_rate=$2
  tHash="${(U)3}"

  if [[ ${tHash:0:20} == 'MAGNET:?XT=URN:BTIH:' ]]; then
    tHash="${tHash:20:40}"
  fi

  shift;shift;shift
  trw $d_rate $u_rate "https://zoink.ch/torrent/${tHash}.torrent" $@
}


ttrw5() {
  # Just another provider
  d_rate=$1
  u_rate=$2
  tHash="${(U)3}"

  if [[ ${tHash:0:20} == 'MAGNET:?XT=URN:BTIH:' ]]; then
    tHash="${tHash:20:40}"
  fi

  shift;shift;shift
  trw $d_rate $u_rate "http://torcache.net/torrent/${tHash}.torrent" $@
}

ttrw6() {
  d_rate=$1
  u_rate=$2
  tHash="${(U)3}"

  if [[ ${tHash:0:20} == 'MAGNET:?XT=URN:BTIH:' ]]; then
    tHash="${tHash:20:40}"
  fi

  shift;shift;shift
  trw $d_rate $u_rate "http://torrage.ws/torrent/${tHash}.torrent" $@
}

Fireg() {
	ex=$1
        shift
	if [[ -n "$2" ]]
	then
                find -H "${1}" -regextype posix-extended ! -type d ! -type p -iregex ".*${2}.*" -exec ${(z)ex} '{}' '+'
	else
                find -H "$PWD" -regextype posix-extended ! -type d ! -type p -iregex ".*${1}.*" -exec ${(z)ex} '{}' '+'
	fi
}

Fireg_old() {
	ex=$1
        shift
	if [[ -n "$2" ]]
	then
                find -H "${1}" -regextype posix-extended ! -type d ! -type p -iregex ".*${2}.*" 2>/dev/null | while read l; do
                  fls=($fls[@] "$l")
                done
	else
                find -H "$PWD" -regextype posix-extended ! -type d ! -type p -iregex ".*${1}.*" 2>/dev/null | while read l; do
                  fls=($fls[@] "$l")
                done
	fi
        ${(z)ex} $fls[@]
        unset ex fls
}

Fparams() {
	ex=$1
        shift
	dir="$1" 
	[[ ${dir:0:1} != '/' ]] && dir="$PWD/$dir" 
	shift
	find -H $dir -regextype posix-extended ! -type d ! -type p $@ -exec ${(z)ex} '{}' '+'
}

Fparams_old() {
	ex=$1
        shift
	dir="$1" 
	[[ ${dir:0:1} != '/' ]] && dir="$PWD/$dir" 
	shift
	find -H $dir -regextype posix-extended ! -type d ! -type p $@ 2>/dev/null | while read l; do
          fls=($fls[@] "$l")
	done
        echo ${(z)ex} $fls[@]
        ${(z)ex} $fls[@]
        unset ex fls
}

xlcri() {
  unset regex last
  ex=$1
  shift
  if [[ "${1[1]}" == '^'  ]];then
    regex="${1}"
  else
    regex=".*${1}"
  fi
  if [[ $# != '1' ]]; then
    for i in `eval echo {2..${#}}`;do
      # bash only indirection
      # regex+=".*${!i}"
      # Use zsh syntax
      regex+=".*${(P)i}"
    done
  fi

  last="${(P)#}"
  if [[ "${last[-1]}" == '$'  ]];then
    locate -0 -bir ${regex}
  else
    locate -0 -bir "${regex}.*"
  fi | egrep -az '^(/media/STORAGE|/media/E[0-9]|/tmp2/)' | if [[ $FILTER_DONE == 1 ]];then
    grep -azv 'ez_done/'
  else
    tee
  fi | if [[ $REVERSE == 1 ]];then
    perl -pe 's/\0/\n/g' | tac | perl -pe 's/\n/\0/g' | xargs -r -0 ${(z)ex} # -r to avoid doing operations on current dir if fed by nothing , -a for possible broken file names
  else
    xargs -r -0 ${(z)ex} # -r to avoid doing operations on current dir if fed by nothing , -a for possible broken file names
  fi
}

xlcri2() {
  FILTER_DONE=1 xlcri $@
}

r_xlcri() {
  REVERSE=1 xlcri $@
}

r_xlcri2() {
  FILTER_DONE=1 REVERSE=1 xlcri $@
}

llcri() {
  xlcri lsh $@
}

lcri() {
  unset regex last
  if [[ "${1[1]}" == '^'  ]];then
    regex="${1}"
  else
    regex=".*${1}"
  fi
  if [[ $# != '1' ]]; then
    for i in `eval echo {2..${#}}`;do
      # bash only indirection
      # regex+=".*${!i}"
      # Use zsh syntax
      regex+=".*${(P)i}"
    done
  fi

  last="${(P)#}"
  if [[ "${last[-1]}" == '$'  ]];then
    locate -bir ${regex}
  else
    locate -bir "${regex}.*"
  fi | egrep -a '^(/media/|/tmp2/)'
}

lcri2() {
  lcri $@ | grep -av 'ez_done/'
}

rmu() {
  u=$1
  shift
  for f in $@ ; do
    sudo su "$u" -c "rm \"$f\""
  done
}

# Android

mpull() {
  adb connect 192.168.5.120
  for f in $@ ; do
    pexec adb pull /sdcard/"$f"
  done
}

mpush() {
  adb connect 192.168.5.120
  for f in $@ ; do
    pexec adb push $f /sdcard/
  done
}

# Multimedia

## Misc


dvd-track-split() {
 if [[ -z $1 ]] || [[ $1 == '-h' ]]; then
   echo dvd-track-split '<folder or iso path>'
   return
 fi
 local -Z2 tn="$(lsdvd $1 | grep '^Title'| wc -l)"
 for t in {01..$tn}; do
   pexec mplayer dvdnav://$t -dvd-device $1 -dumpstream -dumpfile $t.VOB
 done
 pexec mplayer dvdnav://menu -dvd-device $1 -dumpstream -dumpfile menu.VOB
}

4gb() {
  ff_start=''
  ff_end=''
  if [[ -n $2 ]]; then
    ff_start="-ss $2"
  fi
  if [[ -n $3 ]]; then
    ff_end="-to $3"
  fi
  out_file="${1//[|\"\'\[\]\*\?<>]/_}"
  ffmpeg -i $1 -vn -ab 320k ${(z)ff_start} ${(z)ff_end} /tmp2/4GB/${out_file##*/}.mp3
}

cap-frame() {
  vfile="$1"
  frame_pos="$2"
  ifile="cap-${vfile%.*}-${frame_pos}.png"
  pexec ffmpeg -i $vfile -ss $frame_pos -frames 1 $ifile
}

mvAUD() {
  while [[ -f "$1" ]]; do
    echo Reading \'"$1"\' tags...
    typeset -Z2 f_track # leading zero 01 02 03 ...
    f_ext="${1##*.}"
    f_tags="$(ffprobe -show_format "$1" 2>/dev/null)"
    f_track="$(expr "$(echo "$f_tags" | grep -a '^TAG:track=')" : '[^=]*=\(.*\)')"
    f_artist="$(expr "$(echo "$f_tags" | grep -a '^TAG:ARTIST=')" : '[^=]*=\(.*\)')"
    f_title="$(expr "$(echo "$f_tags" | grep -a '^TAG:TITLE=')" : '[^=]*=\(.*\)')"
    [[ -z "$f_track" ]] && echo 'error...empty track' && return 1
    [[ -z "$f_artist" ]] && echo 'error...empty artist...' && return 1
    [[ -z "$f_title" ]] && echo 'error...empty title' && return 1
    $ECHO mv -fv "$1" "${f_track}. ${f_artist} - ${f_title}.$f_ext"
    shift
  done

}

mvAUD_ro() {
  ECHO=echo mvAUD $@
}

aud_split() {
  len="`mediainfo --Inform='General;%Duration%' $1`"
  
  # this script is not intended for gapless playback.
  # extra second duration so we don't miss content.
  (( dur = $2+1  ))
  (( splits = len/$2/1000 ))
  
  if (( len*2/1000%$2 < $2/2  )); then
          echo last part is too short.
          (( splits--  ))
  fi
  
  for f in {000..$splits}; do
          (( seek = $f*$2 ))
          ofile=${1%%.*}_${2}s_$f.${1##*.}
          if (( $f != $splits  )); then
                  pexec "ffmpeg" -ss $seek -i $1 -i <(echo ';FFMETADATA1') -vn -c:a copy -t $dur -map_metadata 1 -metadata title="`basename $ofile`" -metadata artist="aud_split" $ofile
          else
                  pexec "ffmpeg" -ss $seek -i $1 -i <(echo ';FFMETADATA1') -vn -c:a copy -map_metadata 1 -metadata title="`basename $ofile`" -metadata artist="aud_split" $ofile
          fi
  done
}

rtmpd(){
  cd ~/rtmpd_bin
  ./rtmpd $@ rtmpd.lua
  cd - &>/dev/null
}

spectro () {
	sox "${1}" -n trim $2 $3 spectrogram -o "${1%.*}.png"
}
spectro2 () {
	sox "${1}" -n trim $2 $3 spectrogram -o "${1%.*}.png"
	q "${1%.*}.png"
	rm -f "${1%.*}.png"
}
spectro3 () {
	#sox --ignore-length -t wav <(wavout ${1} 2>/dev/null) -n trim $2 $3 spectrogram -o "${1%.*}.png"
	sox --ignore-length -t wav =(ffmpeg -i ${1} -ss $2 -t $3 -f wav - 2>/dev/null) -n spectrogram -o "${1%.*}.png"
	q "${1%.*}.png"
	rm -f "${1%.*}.png"
}

NR() {
  in_file="$1"
  trim_start="$2"
  trim_len="$3"
  filter_strength="$4"

  out_file="${in_file%.*}_NR.flac"
  [[ -f "${out_file}" ]] && echo "${out_file}" exists && return 1

  echo sox "${in_file}" -n trim "${trim_start}" "${trim_len}" noiseprof '|' sox "${in_file}" "${out_file}" noisered - "${filter_strength}"
  sox "${in_file}" -n trim "${trim_start}" "${trim_len}" noiseprof | sox "${in_file}" "${out_file}" noisered - "${filter_strength}"
}

swavout () {
	sox $1 -t wav -
}

wav () {
	for file in $@
	do
		"ffmpeg" -i $file -f wav ${file%.*}.wav
	done
}

wavout () {
	"ffmpeg" -i $1 -f wav - 2>/dev/null
}

wavout48 () {
  wavout "$1" | sox --ignore-length -t wav - -t wav - rate -vs 48000 2>/dev/null
}

wavout44 () {
  wavout "$1" | sox --ignore-length -t wav - -t wav - rate -vs 44100 2>/dev/null
}

## Lossless

wv () {
	in=$1 
	[ -f ${in%.*}.wv ] && echo "${in%.*}.wv" exists && return 1
	shift
	TAGS=() 
	counter=1 
	if (( NO_ENCODER == 1 ))
	then
		avtag "$in" | sed 's/^\(ENCODER\|COMMENT\)=/ORIGINAL_\1=/'
	else
		if (( NO_ENCODER == 2 ))
		then
			avtag "$in" | egrep -av '(ENCODER|COMMENT)='
		else
			avtag "$in"
		fi
	fi | while read t
	do
		TAGS[$counter]="-w" 
		(( counter++ ))
		TAGS[$counter]="${t#TAG:}" 
		(( counter++ ))
	done
	swavout "$in" 2> /dev/null | wavpack "$TAGS[@]" "$@" -i - -o "${in%.*}.wv"
}

wvn () {
	NO_ENCODER=2 wv $@
}

wvr () {
	NO_ENCODER=1 wv $@
}

ape () {
	in=$1 
	[ -f ${in%.*}.ape ] && echo "${in%.*}.ape" exists && return 1
	shift
	TAGS=() 
	counter=1 
	if (( NO_ENCODER == 1 ))
	then
		avtag "$in" | sed 's/^\(ENCODER\|COMMENT\)=/ORIGINAL_\1=/'
	else
		if (( NO_ENCODER == 2 ))
		then
			avtag "$in" | egrep -av '(ENCODER|COMMENT)='
		else
			avtag "$in"
		fi
	fi | while read t
	do
		TAGS[$counter]="-p" 
		(( counter++ ))
		TAGS[$counter]="${t#TAG:}" 
		(( counter++ ))
	done
	swavout "$in" 2> /dev/null | mac - "${in%.*}.ape" "$@"
	apetag -i "${in%.*}.ape" -m update "$TAGS[@]"
}

apen () {
	NO_ENCODER=2 ape $@
}

aper () {
	NO_ENCODER=1 ape $@
}

## Meta

RG_UP() {
  # REMEMBER: find  with no args means use $PWD
  find -H $@ -regextype posix-extended -type d | while read d; do
    #if stat --print='' "${d}"/*.[Ff][Ll][Aa][Cc] 2>/dev/null; then 
    # Use find -H to -regextype posix-extended avoid matching dirs
    if [[ -n $(find -H "${d}" -regextype posix-extended -maxdepth 1 -mindepth 1 -type f -iname '*.flac' 2>/dev/null) ]]; then 
      if ( exist_tag all EBU_R128_LOUDNESS_SCAN_DATE "${d}"/*.[Ff][Ll][Aa][Cc] ) ; then
        echo skipping "$d"...
      else 
        if ( exist_tag once EBU_R128_LOUDNESS_SCAN_DATE "${d}"/*.[Ff][Ll][Aa][Cc] ) ; then
          echo Warning: partial scan existed in "$d", rescanning all...
        fi
        if [[ -z $DRY_RUN  ]]; then
          echo scanning "$d"...
          metaflac --remove-replay-gain "${d}"/*.[Ff][Ll][Aa][Cc]
          metaflac --remove-tag=REPLAYGAIN_REFERENCE_LOUDNESS "${d}"/*.[Ff][Ll][Aa][Cc]
          loudness tag ${LOUDNESS_TAG_ARGS} "${d}"/*.[Ff][Ll][Aa][Cc]
          [ -n $LOUDNESS_TAG_ARGS  ] && metaflac --set-tag=EBU_R128_LOUDNESS_TAG_ARGS="$LOUDNESS_TAG_ARGS" "${d}"/*.[Ff][Ll][Aa][Cc]
          metaflac --set-tag=EBU_R128_LOUDNESS_SCAN_DATE="`date '+%Y.%m.%d'`" "${d}"/*.[Ff][Ll][Aa][Cc]
        else
          echo dry-run: scanning "$d"...
        fi
      fi
    fi
  done
}

RGT_UP() {
  LOUDNESS_TAG_ARGS='-t' RG_UP $@
}

m3i () {
	for f in $@
	do
		echo $f
		mpv -frames 0 -ao null -vo null -msg-level all=-1:identify=7 -- $f
	done
}

mi () {
	mediainfo $@ | less
}

ffmi () {
	#ffprobe -show_format -show_streams -unit -prefix -pretty -fflags nometaconv $@ 2> /dev/null | less
	ffprobe -show_format -show_streams -unit -prefix -pretty $@ 2> /dev/null | less
}

ffmt () {
	ffprobe -show_streams -unit -prefix -pretty "$*" 2> /dev/null | egrep -a '(TAG|codec_name=|width=|height=)' | sed 's|^TAG:||;s|=|: |'
	ffprobe -show_format -unit -prefix -pretty "$*" 2> /dev/null | egrep -a '(TAG|format_name=|size=|duration=|bit_rate=)' | sed 's|^TAG:||;s|=|: |'
}

avtag () {
	"ffmpeg" -i "$1" -f ffmetadata - 2> /dev/null | tail -n +2
}

avtags () {
	for f in $@
	do
		echo FILE: "$f"
		avtag "$f"
	done
}

## Download


## Play

RMPL() {
  MPL=(${(z)MPL} -loop 0 --input=conf=reverse.conf)
}

mlcri() {
  # depends on lcri function defined earlier in this file
  [[ -z $MPL ]] && MPL="mpv"
  ${(z)MPL} -playlist =(lcri $@ 2>/dev/null)

}

vlcri() {
  # depends on lcri function defined earlier in this file
  [[ -z $MPL ]] && MPL="mpv"
  ${(z)MPL} -playlist =(lcri $@ 2>/dev/null | egrep -ai $VID_EXT)
}

vlcriP() {
  # depends on lcri function defined earlier in this file
  [[ -z $MPL ]] && MPL="mpv"
  ${(z)MPL} -playlist =(lcri $@ 2>/dev/null | grep /P/ | egrep -ai $VID_EXT)
}

qlcri() {
  [[ -z $Q ]] && Q=q
  qlist=()
  lcri $@ 2>/dev/null | while read f ; do
    qlist=($qlist[@] "$f")
  done
  ${(z)Q} $qlist[@]
}

m2s () {
	[[ -z $MPL ]] && MPL="mpv "
	fls=()
	if [[ -n "$2" ]]
	then
                find -H "${1}" -regextype posix-extended ! -type d ! -type p -iregex ".*${2}.*" 2>/dev/null | while read l; do
                  fls=($fls[@] "$l")
                done
	else
                find -H "$PWD" -regextype posix-extended ! -type d ! -type p -iregex ".*${1}.*" 2>/dev/null | while read l; do
                  fls=($fls[@] "$l")
                done
	fi
        ${(z)MPL} $fls[@]
}

x2s2 () {
	ex="$1"
	dir="$2"
	[[ ${dir:0:1} != '/' ]] && dir="$PWD/$dir" 
	shift; shift
	find -H $dir -regextype posix-extended $@ ! -type d ! -type p -exec ${(z)ex} '{}' '+'
	unset ex
}

m2s2 () {
	[[ -z $MPL ]] && MPL="mpv "
	dir="$1" 
	[[ ${dir:0:1} != '/' ]] && dir="$PWD/$dir" 
	shift
	${(z)MPL} -playlist =(find -H $dir -regextype posix-extended ! -type d ! -type p $@ 2>/dev/null)
        unset MPL
}

v2s2 () {
	[[ -z $MPL ]] && MPL="mpv "
	dir="$1" 
	[[ ${dir:0:1} != '/' ]] && dir="$PWD/$dir" 
	shift
	${(z)MPL} -playlist =(find -H $dir -regextype posix-extended ! -type d ! -type p $@ 2>/dev/null | egrep -ai $VID_EXT)
        unset MPL
}

m2s2l () {
	[[ -z $MPL ]] && MPL="mpv "
	dir="$1" 
	shift
	find -H $dir -regextype posix-extended $@ 2> /dev/null | ${(z)MPL} -playlist -
}

m2sl () {
	[[ -z $MPL ]] && MPL="mpv "
	if [ -n "$2" ]
	then
		eval find -H ${1} -regextype posix-extended -iname '\*${2}\*' 2> /dev/null | ${(z)MPL} -playlist -
	else
		eval find -H $PWD -regextype posix-extended -iname '\*${1}\*' 2> /dev/null | ${(z)MPL} -playlist -
	fi
}

# Misc

## Dev

massif_top5() {
  grep '^mem_heap_B' "$1" | sed 's|mem_heap_B=||' | sort -g | tail -5
}

## pacman

Qoc() {
  pacman -Qo "`which $1`"
}

Stop() {
  sudo pacman -Su $@ -p --print-format "%s %n %v"|sort -rg| less
}

SE3() {
  cur_d=`pwd`
  cd ${cur_d/STORAGE/E3}
}

E3S() {
  cur_d=`pwd`
  cd ${cur_d/E3/STORAGE}
}

SE4() {
  cur_d=`pwd`
  cd ${cur_d/STORAGE/E4}
}

E4S() {
  cur_d=`pwd`
  cd ${cur_d/E4/STORAGE}
}


SE2() {
  cur_d=`pwd`
  cd ${cur_d/STORAGE/E2}
}

E2S() {
  cur_d=`pwd`
  cd ${cur_d/E2/STORAGE}
}

SE() {
  cur_d=`pwd`
  cd ${cur_d/STORAGE/EXTERNAL}
}

ES() {
  cur_d=`pwd`
  cd ${cur_d/EXTERNAL/STORAGE}
}

sz () {
	s1=`stat --printf '%s\n' $1`.0 
	s2=`stat --printf '%s\n' $2`.0 
	(( p=s1/s2 ))
	echo $p
}

whv () {
	hview $@ | lynx -nomargins -width `tput cols` -stdin -dump -nolist
}
whv_re () {
	hview_re $@ | lynx -nomargins -width `tput cols` -stdin -dump -nolist
}
wt () {
	if [[ "$1" = [0-9]* ]]
	then
		refresh=$1 
		shift
	else
		refresh=1 
	fi
	while true
	do
		clear
		lines="$(tput lines)" 
		(( lines=$lines-4 ))
		echo Watching $@
		echo
		$@ | head -${lines}
		sleep $refresh
	done
}

csv () {
	sed 's|^|<tr><td>|;s|,|</td><td>|g;s|$|</td></tr>|;$s|$|</table>|;1i\<table>' $@ | lynx -nomargins -width `tput cols` -stdin -dump -nolist | less
}

csvf () {
	if [[ -z $2 ]]
	then
		cat $1 | awk -F',' '{ print $1 }'
	else
		cmd="cat \$1 | awk -F',' '{ print \$VAR }'" 
		cmd=${cmd/VAR/$2} 
		eval $cmd
	fi | less
}

lS () {
	/bin/ls --color=never -lSh --time-style='+%Y.%m.%d-%T' $@ | /usr/bin/less
}

lt () {
	/bin/ls --color=never -ltch --time-style='+%Y.%m.%d-%T' $@ | /usr/bin/less
}

lT() {
  /bin/ls --color=never -lth --time-style='+%Y.%m.%d-%T' $@ | /usr/bin/less
}

lt2() {
  find -H $1 -regextype posix-extended -maxdepth 1 -size +511k -type f -printf '%.23A+ %8k %h/%f\n' | sort -rh | less
}

lS2() {
  find -H $1 -regextype posix-extended -size +511k -type f -printf '%8k %.23A+ %h/%f\n' | sort -rh | less
}

lSH() {
  lsh $@ |sort -rh | less
}

mkcd () {
	mkdir -p "$1"
	cd "$1"
}

mvd () {
	tdir=${${tdir}:-/media/STORAGE/ez_done} 
	pexec mv $@ $tdir
	for f in $@
	do
                for ext in srt sub idx txt
                do
                  [[ -f "${f%.*}.${ext}" ]] && pexec rm "${f%.*}.${ext}"
                  [[ -f "${f}.${ext}" ]] && pexec rm "${f}.${ext}"
                done
	done
	pexec cd $tdir
}

mvd2 () {
	tdir=${${tdir}:-/media/STORAGE/ez_done} 
	for f in $@
	do
		if [[ -f "$f" ]]
		then
			pexec rm "$f"
			pexec touch "${tdir}/`basename $f`"
                        for ext in srt sub idx txt
                        do
                          [[ -f "${f%.*}.${ext}" ]] && pexec rm "${f%.*}.${ext}"
                          [[ -f "${f}.${ext}" ]] && pexec rm "${f}.${ext}"
                        done
		else
			echo ERROR: \""$f"\" is not a file
		fi
	done
	#cd $tdir
}

mvunq () {
	mv -iv "$1" "`unq $1`"
}

pget () {
	pbget --aur $@
	eval cd $"$#"
}

ace() {
  date 1>&2
  id=

  if [[ -f $1  ]]; then
    id="`cat $1`"
  else
    id="$1"
  fi

  id=${id##*/}
  pexec streamlink --hls-segment-timeout 120 "http://127.0.0.1:6878/ace/manifest.m3u8?id=${id}" best -O
  #pexec curl -L "http://127.0.0.1:6878/ace/getstream?id=${id}"
}

pace() {
  date 1>&2
  id=

  if [[ -f $1  ]]; then
    id="`cat $1`"
  else
    id="$1"
  fi

  id=${id##*/}
  pexec curl http://127.0.0.1:8000/pid/${id}/stream.mp4
}

. "$HOME"/.functions_private
